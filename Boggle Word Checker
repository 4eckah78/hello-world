using namespace std;

void findWordsUtil(const vector<vector<char> > &board, const string& word, bool** visited, int i, int j, string& str, int& ans) {
  visited[i][j] = true;
  str = str + board[i][j];
  cout << str << endl;
  if (str.compare(word) == 0)
    ans++;
  if (ans == 1)
    return;
  int k = board.size();
  int l = board[0].size();
  for (int row = i - 1; row <= i + 1 && row < k; row++)
    for (int col = j - 1; col <= j + 1 && col < l; col++)
     if (row >= 0 && col >= 0 && !visited[row][col] && word.find(str + board[row][col]) == 0)
        findWordsUtil(board, word, visited, row, col, str, ans);

  str.erase(str.length() - 1);
  visited[i][j] = false;
}

bool check_word(const vector<vector<char> > &board, const string &word) {

  bool** visited = new bool*[board.size()];
  for (int i = 0; i < board.size(); i++)
    visited[i] = new bool[board[0].size()];
  int answer = 0;

  for (int i = 0; i < board.size(); i++)
    for (int j = 0; j < board[0].size(); j++)
      visited[i][j] = false;

  string str = "";

  for (int i = 0; i < board.size(); i++)
    for (int j = 0; j < board[0].size(); j++) 
      if (board[i][j] == word[0]) {
        findWordsUtil(board, word, visited, i, j, str, answer);
        if (answer != 0)
          return true;
      }
  return answer != 0;
}
